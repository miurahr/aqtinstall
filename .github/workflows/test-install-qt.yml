name: Test on GH actions environment

on: push

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macOS-latest, ubuntu-latest]
        py: [3.9]
        qtver: [5.9.9, 5.12.8, 6.1.0]
        include:
          - os: ubuntu-20.04
            py: 3.9
            qtver: 6.1.0
        exclude:
          - os: ubuntu-latest
            py: 3.9
            qtver: 6.1.0
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 20
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.py }}
      - name: Run pytest
        run: |
          python -m pip install tox-gh-actions
          tox
      - name: Build a binary wheel and install
        run: |
          python -m pip install pep517 --user
          python -m pip install ./ --user
      - name: Run Aqt
        run: |
          import subprocess
          timeout = 300
          command_line = ["python", "-m", "aqt", "install"]
          platform = "${{ matrix.os }}"
          qtver = "${{ matrix.qtver }}"
          if platform == "windows-latest":
            if qtver.startswith('5.15'):
              args = [qtver, "windows", "desktop", "win64_msvc2019_64"]
            elif qtver.startswith('5.14'):
              args = [qtver, "windows", "desktop", "win64_msvc2017_64"]
            elif qtver.startswith('6'):
              args = [qtver, "windows", "desktop", "win64_mingw81"]
            else:
              args = [qtver, "windows", "desktop", "win64_msvc2015_64"]
          elif platform == "macOS-latest":
            args = [qtver, "mac", "desktop", "clang_64"]
          else:
            args = [qtver, "linux", "desktop", "gcc_64"]
          command_line.extend(args)
          command_line.extend(["--archives", "qtbase", "icu", "qt"])
          print("Execute: {}".format(command_line))
          try:
            res = subprocess.run(command_line, timeout=timeout, check=True)
          except subprocess.CalledProcessError as cpe:
            exit(cpe.returncode)
          assert res.returncode == 0
          if qtver.startswith('6'):
            if platform == 'ubuntu-20.04':
              command_line = ["python", "-m", "aqt", "install", qtver, "linux", "android", "android_armv7"]
            elif platform == "macOS-latest":
              command_line = ["python", "-m", "aqt", "install", qtver, "mac", "ios", "ios"]
            else:
              command_line = ["python", "-m", "aqt", "install", qtver, "windows", "android", "android_armv7"]
            try:
              res = subprocess.run(command_line, timeout=timeout, check=True)
            except subprocess.CalledProcessError as cpe:
              exit(cpe.returncode)
            assert res.returncode == 0
        shell: python
      - name: Test qmake -query
        run: |
          import os
          import pathlib
          from subprocess import CalledProcessError, PIPE, run
          platform = "${{ matrix.os }}"
          qtver = "${{ matrix.qtver }}"
          if platform == "windows-latest":
            if qtver.startswith('5.15'):
              arch_dir = 'msvc2019_64'
            elif qtver.startswith('5.14'):
              arch_dir = 'msvc2017_64'
            elif qtver.startswith('6'):
              arch_dir = 'mingw81_64'
            else:
              arch_dir = 'msvc2015_64'
          elif platform == "macOS-latest":
            arch_dir = 'clang_64'
          else:
            arch_dir = 'gcc_64'
          try:
            res = run([f"{qtver}/{arch_dir}/bin/qmake", "-query"], timeout=15, check=True, stdout=PIPE)
          except CalledProcessError as cpe:
            exit(cpe.returncode)
          if res.returncode == 0:
            qt_prefix_path = pathlib.Path.cwd() / qtver / arch_dir
            for line in res.stdout.splitlines():
              if line.startswith(b'QT_INSTALL_PREFIX'):
                result = line[18:].decode('UTF-8')
                assert qt_prefix_path.samefile(result)
            print('PREFIX {}'.format(result))
            if qtver.startswith('6'):
              if platform == "windows-latest" and qtver.startswith('6'):
                qmake = os.path.join(qtver, 'android_armv7', 'bin', 'qmake.bat')
              elif platform == "macOS-latest" and qtver.startswith('6'):
                qmake = os.path.join(qtver, 'ios', 'bin', 'qmake')
              else:
                qmake = os.path.join(qtver, 'android_armv7', 'bin', 'qmake')
              try:
                res = run([qmake, "-query"], timeout=15, check=True, stdout=PIPE)
              except CalledProcessError as cpe:
                exit(cpe.returncode)
              assert res.returncode == 0
              for line in res.stdout.splitlines():
                if line.startswith(b'QT_INSTALL_PREFIX'):
                  result = line[18:].decode('UTF-8')
              print('PREFIX {}'.format(result))
        shell: python
