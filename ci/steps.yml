steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(PYTHON_VERSION)
      architecture: 'x64'
  - script: |
      cd $(Build.SourcesDirectory)
      python -m pip install -rrequirements.txt
    displayName: 'Install dependency'
  - task: PythonScript@0
    inputs:
      scriptSource: filePath
      scriptPath: $(Build.SourcesDirectory)/setup.py
      arguments: sdist bdist_wheel
      workingDirectory: $(Build.SourcesDirectory)
    displayName: build package
  #
  # Install aqtinstall
  - powershell: |
      $aqtVersion = & python $(Build.SourcesDirectory)/setup.py --version | Out-String -Stream
      pip install $(Build.SourcesDirectory)/dist/aqtinstall-$aqtVersion-py2.py3-none-any.whl
    displayName: install package
  - task: PythonScript@0
    inputs:
      scriptSource: filePath
      scriptPath: $(Build.SourcesDirectory)/bin/aqt
      arguments: install $(QT_VERSION) $(HOST) $(TARGET) $(ARCH) --internal
      workingDirectory: $(Build.BinariesDirectory)
    condition: and(not(variables['QT_BASE_MIRROR']), not(variables['TOOL_NAME']))
    displayName: Run Aqt (No Base URL Set)
  - task: PythonScript@0
    inputs:
      scriptSource: filePath
      scriptPath: $(Build.SourcesDirectory)/bin/aqt
      arguments: install $(QT_VERSION) $(HOST) $(TARGET) $(ARCH) -b $(QT_BASE_MIRROR)
      workingDirectory: $(Build.BinariesDirectory)
    condition: and(variables['QT_BASE_MIRROR'], not(variables['TOOL_NAME']))
    displayName: Run Aqt (Base URL Set)
  #
  # Test installation results
  # for Android on linux
  - script: |
      wget https://dl.google.com/android/repository/android-ndk-r19c-linux-x86_64.zip
      unzip android-ndk-r19c-linux-x86_64.zip
    condition: and(eq(variables['TARGET'], 'android'), eq(variables['Agent.OS'], 'Linux'))
    displayName: Download and extract Android NDK
  # for Android on mac
  - script: |
      wget https://dl.google.com/android/repository/android-ndk-r19c-darwin-x86_64.zip
      unzip android-ndk-r19c-darwin-x86_64.zip
    condition: and(eq(variables['TARGET'], 'android'), eq(variables['Agent.OS'], 'Darwin'))
    displayName: Download and extract Android NDK
  - script: |
      export ANDROID_NDK_ROOT=$(Build.SourcesDirectory)/android-ndk-r19c
      $(Build.BinariesDirectory)/Qt/$(QT_VERSION)/$(ARCHDIR)/bin/qmake $(Build.SourcesDirectory)/tests/accelbubble/ && make
    condition: and(eq(variables['TARGET'], 'android'), or(eq(variables['Agent.OS'], 'Linux'), eq(variables['Agent.OS'], 'Darwin')))
    displayName: Build accelbubble example application to test for android
  # for desktop application
  - powershell: |
      Install-PackageProvider NuGet -Force
      Import-PackageProvider NuGet -Force
      Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
      Install-Module Pscx -AllowClobber
      Install-Module VSSetup -Scope CurrentUser
      if ('$(ARCH)' -like '*msvc*') {
        echo '##vso[task.setvariable variable=TOOLCHAIN]MSVC'
      }
      if ('$(ARCH)' -like '*mingw*') {
        echo '##vso[task.setvariable variable=TOOLCHAIN]MINGW'
      }
      if ('$(ARCH)' -like 'win64_msvc*') {
        echo '##vso[task.setvariable variable=ARCHITECTURE]amd64'
      } else {
        echo '##vso[task.setvariable variable=ARCHITECTURE]x86'
      }
      if ('$(ARCH)' -like '*msvc2017*') {
        echo '##vso[task.setvariable variable=VSVER]2017'
      } else {
        echo '##vso[task.setvariable variable=VSVER]2015'
      }
    condition: eq( variables['Agent.OS'], 'Windows_NT')
  - powershell: |
      Import-VisualStudioVars -VisualStudioVersion $(VSVER) -Architecture $(ARCHITECTURE)
      $(Build.BinariesDirectory)/Qt/$(QT_VERSION)/$(ARCHDIR)/bin/qmake $(Build.SourcesDirectory)/tests
      nmake
    condition: and(eq( variables['Agent.OS'], 'Windows_NT'), eq(variables['TOOLCHAIN'], 'MSVC'))
    displayName: build test with qmake with MSVC
  - script: |
      sudo apt-get install libgl1-mesa-dev
      $(Build.BinariesDirectory)/Qt/$(QT_VERSION)/$(ARCHDIR)/bin/qmake $(Build.SourcesDirectory)/tests
      make
    condition: and(eq( variables['TARGET'], 'desktop' ), or(eq(variables['Agent.OS'], 'Linux'), eq(variables['Agent.OS'], 'Darwin')))
    displayName: Build test with qmake for Linux and macOS
  # for ios
  - script: echo Currently not implemented.
    condition: and(eq(variables['TARGET'], 'ios'), eq(variables['Agent.OS'], 'Darwin'))
    displayName: Build test with qmake for ios
  #
  # Install aqtinstall
  - powershell: |
      $aqtVersion = & python $(Build.SourcesDirectory)/setup.py --version | Out-String -Stream
      pip install $(Build.SourcesDirectory)/dist/aqtinstall-$aqtVersion-py2.py3-none-any.whl
    displayName: install package
  - task: PythonScript@0
    inputs:
      scriptSource: filePath
      scriptPath: $(Build.SourcesDirectory)/bin/aqt
      arguments: tool $(HOST) $(TOOL_NAME) $(TOOL_VERSION) $(ARCH) --internal
      workingDirectory: $(Build.BinariesDirectory)
    condition: variables['TOOL_NAME']
    displayName: Run Aqt (Tool)
  #
  # Test installation results
  # for OpenSSL on linux
  - script: |
      $(Build.BinariesDirectory)/Qt/Tools/$(TEST_EXECUTABLE) $(TEST_COMMAND)
    condition: variables['TOOL_NAME']
    displayName: Tool test
