steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(PYTHON_VERSION)
      architecture: 'x64'
  - powershell: |
      pip install -e .
    displayName: install package

  # Run Aqt
  ##----------------------------------------------------
  ## we insert sleep in random duration < 30sec to reduce
  ## download server load.
  - bash: |
      set -e
      number=$RANDOM
      let "number %= 30"
      sleep $number
      mkdir Qt
      cd Qt
      if [[ "$(SUBCOMMAND)" == "install" ]]; then
        opt=""
        if [[ "$(QT_BASE_MIRROR)" != "" ]]; then
          opt+=" -b $(QT_BASE_MIRROR)"
        fi
        if [[ "$(MODULE)" != "" ]]; then
          opt+=" -m $(MODULE)"
        fi
        if [[ "$(SUBARCHIVES)" != "" ]]; then
          opt+=" --archives $(SUBARCHIVES)"
        fi
        python -m aqt install $(QT_VERSION) $(HOST) $(TARGET) $(ARCH) $opt
        if [[ "$(TARGET)" == "android" || "$(TARGET)" == "ios" ]]; then
          if [[ "$(HOST)" == "windows" ]]; then
            python -m aqt install $(QT_VERSION) $(HOST) desktop mingw81_64 --archives qtbase
          else
            python -m aqt install $(QT_VERSION) $(HOST) desktop --archives qtbase
          fi
        fi
      fi
      if [[ "$(SUBCOMMAND)" == "list" ]]; then
        echo implement me.
      fi
      if [[ "$(SUBCOMMAND)" == "src" ]]; then
        python -m aqt $(SUBCOMMAND) $(QT_VERSION) $(HOST) $(TARGET) --archives $(SUBARCHIVES)
      fi
      if [[ "$(SUBCOMMAND)" == "doc" ]]; then
        python -m aqt $(SUBCOMMAND) $(QT_VERSION) $(HOST) $(TARGET) --archives $(SUBARCHIVES)
      fi
    workingDirectory: $(Build.BinariesDirectory)
    env:
      AQT_CONFIG: $(Build.SourcesDirectory)/ci/settings.ini
    displayName: Run Aqt

  ##----------------------------------------------------
  # for Android target
  - bash: |
      set -e
      if [[ "$(Agent.OS)" == "Linux" ]]; then
        wget https://dl.google.com/android/repository/android-ndk-r21e-linux-x86_64.zip
        unzip android-ndk-r21e-linux-x86_64.zip
      fi
      if [[ "$(Agent.OS)" == "Darwin" ]]; then
        wget https://dl.google.com/android/repository/android-ndk-r21e-darwin-x86_64.zip
        unzip android-ndk-r21e-darwin-x86_64.zip
      fi
      export ANDROID_NDK_ROOT=$(Build.SourcesDirectory)/android-ndk-r21e
      mkdir $(Build.BinariesDirectory)/tests
      (cd $(Build.BinariesDirectory)/tests; 7zr x $(Build.SourcesDirectory)/ci/accelbubble.7z)
      export PATH=$(Build.BinariesDirectory)/Qt/$(QT_VERSION)/$(ARCHDIR)/bin:$PATH
      qmake $(Build.BinariesDirectory)/tests/accelbubble
      make
    condition: and(eq(variables['TARGET'], 'android'), or(eq(variables['Agent.OS'], 'Linux'), eq(variables['Agent.OS'], 'Darwin')))
    displayName: Build accelbubble example application to test for android

  - script: |
      sudo apt-get update
      sudo apt-get install -y libgl1-mesa-dev
    condition: and(eq(variables['TARGET'], 'desktop'), eq(variables['Agent.OS'], 'Linux'), eq(variables['SUBCOMMAND'], 'install'))
    displayName: install test dependency for Linux

  ##----------------------------------------------------
  # determine Windows build system
  - powershell: |
      Install-PackageProvider NuGet -Force
      Import-PackageProvider NuGet -Force
      Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
      Install-Module Pscx -AllowClobber
      Install-Module VSSetup -Scope CurrentUser
      if ('$(ARCH)' -like '*msvc*') {
        Write-Host '##vso[task.setvariable variable=TOOLCHAIN]MSVC'
      }
      if ('$(ARCH)' -like '*mingw*') {
        Write-Host '##vso[task.setvariable variable=TOOLCHAIN]MINGW'
      }
      if ('$(ARCH)' -like 'win64_msvc*') {
        Write-Host '##vso[task.setvariable variable=ARCHITECTURE]amd64'
      } else {
        Write-Host '##vso[task.setvariable variable=ARCHITECTURE]x86'
      }
      if ('$(ARCH)' -like '*msvc2019*') {
        Write-Host '##vso[task.setvariable variable=VSVER]2019'
      } elseif ('$(ARCH)' -like '*msvc2017*') {
        Write-Host '##vso[task.setvariable variable=VSVER]2017'
      } else {
        Write-Host '##vso[task.setvariable variable=VSVER]2015'
      }
      cd $(Build.BinariesDirectory)\Qt\$(QT_VERSION)\$(ARCHDIR)\bin
      Invoke-WebRequest -Uri https://mirrors.ocf.berkeley.edu/qt/official_releases/jom/jom.zip -OutFile jom.zip
      unzip jom.zip
    condition: eq( variables['Agent.OS'], 'Windows_NT')
    displayName: Detect toolchain for Windows and update PATH

  # When no modules
  - script: |
      mkdir $(Build.BinariesDirectory)/tests
      (cd $(Build.BinariesDirectory)/tests; 7zr x $(Build.SourcesDirectory)/ci/helloworld.7z)
      export PATH=$(Build.BinariesDirectory)/Qt/$(QT_VERSION)/$(ARCHDIR)/bin:$PATH
      qmake $(Build.BinariesDirectory)/tests/helloworld
      make
    condition: and(eq( variables['TARGET'], 'desktop' ), ne( variables['ARCH'], 'wasm_32' ), or(eq(variables['Agent.OS'], 'Linux'), eq(variables['Agent.OS'], 'Darwin')), eq(variables['MODULE'], ''), eq(variables['SUBCOMMAND'], 'install'))
    displayName: Build test with qmake for Linux and macOS w/o extra module
  # TODO: current PSCX release does not support VSVER 2019
  - powershell: |
      if ( $env:TOOLCHAIN -eq 'MSVC' ) {
        Import-VisualStudioVars -VisualStudioVersion $(VSVER) -Architecture $(ARCHITECTURE)
        $env:Path += ";$(Build.BinariesDirectory)\Qt\$(QT_VERSION)\$(ARCHDIR)\bin"
        mkdir $(Build.BinariesDirectory)\tests
        cd $(Build.BinariesDirectory)\tests
        7z x $(Build.SourcesDirectory)\ci\helloworld.7z
        cd ..
        qmake $(Build.BinariesDirectory)\tests\helloworld
        jom
      } elseif ( $env:TOOLCHAIN -eq 'MINGW' ) {
        if ( $env:ARCH -eq 'win64_mingw81' ) {
          python -m aqt tool --outputdir $(Build.BinariesDirectory)/Qt $(HOST) tools_mingw 8.1.0-1-202004170606 qt.tools.win64_mingw810
          [Environment]::SetEnvironmentVariable("Path", ";$(Build.BinariesDirectory)\Qt\Tools\mingw810_64\bin" + $env:Path, "Machine")
        } else {
          python -m aqt tool --outputdir $(Build.BinariesDirectory)/Qt $(HOST) tools_mingw 8.1.0-1-202004170606 qt.tools.win32_mingw810
          [Environment]::SetEnvironmentVariable("Path", ";$(Build.BinariesDirectory)\Qt\Tools\mingw810_32\bin" + $env:Path, "Machine")
        }
        $env:Path = "$(Build.BinariesDirectory)\Qt\Tools\$(ARCHDIR)\bin;$(Build.BinariesDirectory)\Qt\$(QT_VERSION)\$(ARCHDIR)\bin;" + $env:Path
        mkdir $(Build.BinariesDirectory)\tests
        cd $(Build.BinariesDirectory)\tests
        7z x $(Build.SourcesDirectory)\ci\helloworld.7z
        cd ..
        qmake $(Build.BinariesDirectory)\tests\helloworld
        mingw32-make
      }
    condition: and(eq( variables['Agent.OS'], 'Windows_NT'), eq(variables['MODULE'], ''))
    displayName: build test with qmake w/o extra module
  - powershell: |
      Import-VisualStudioVars -VisualStudioVersion $(VSVER) -Architecture $(ARCHITECTURE)
      $env:Path += ";$(Build.BinariesDirectory)\Qt\$(QT_VERSION)\$(ARCHDIR)\bin"
      echo Add Qt to PATH: $env:PATH
      mkdir $(Build.BinariesDirectory)/tests
      cd $(Build.BinariesDirectory)/tests
      7z x $(Build.SourcesDirectory)/ci/redditclient.7z
      cd ..
      qmake $(Build.BinariesDirectory)\tests\redditclient
      nmake
    condition: and(eq( variables['Agent.OS'], 'Windows_NT'), eq(variables['TOOLCHAIN'], 'MSVC'), ne(variables['MODULE'], ''), ne(variables['VSVER'], '2019'))
    displayName: build test with qmake with MSVC with extra module
  - bash: |
      mkdir $(Build.BinariesDirectory)/tests
      (cd $(Build.BinariesDirectory)/tests; 7zr x $(Build.SourcesDirectory)/ci/redditclient.7z)
      export PATH=$(Build.BinariesDirectory)/Qt/$(QT_VERSION)/$(ARCHDIR)/bin:$PATH
      qmake $(Build.BinariesDirectory)/tests/redditclient
      make
    condition: and(eq( variables['TARGET'], 'desktop'), or(eq(variables['Agent.OS'], 'Linux'), eq(variables['Agent.OS'], 'Darwin')), ne(variables['MODULE'], ''))
    displayName: Build test with qmake for Linux and macOS with extra module

  ##----------------------------------------------------
  # wasm_32 on linux and mac
  - script: |
      git clone https://github.com/emscripten-core/emsdk.git
      cd emsdk
      ./emsdk install sdk-fastcomp-1.38.27-64bit
      ./emsdk activate --embedded  sdk-fastcomp-1.38.27-64bit
      source $(Build.BinariesDirectory)/emsdk/emsdk_env.sh
      mkdir $(Build.BinariesDirectory)/tests
      (cd $(Build.BinariesDirectory)/tests; 7zr x $(Build.SourcesDirectory)/ci/openglwindow.7z)
      export PATH=$(Build.BinariesDirectory)/Qt/$(QT_VERSION)/$(ARCHDIR)/bin:$PATH
      qmake $(Build.BinariesDirectory)/tests/openglwindow
      make
    workingDirectory: $(Build.BinariesDirectory)
    condition: and(eq( variables['ARCH'], 'wasm_32' ), or(eq(variables['Agent.OS'], 'Linux'), eq(variables['Agent.OS'], 'Darwin')))
    displayName: 'Build WebAssembler sample project'
